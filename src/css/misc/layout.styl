
/*
	This helper function simplifies some of the flexbox
	terminology. There are some layouts too advanced for this,
	but in the majority of times this saves a lot of typing.

	It's written with left, center, right always referring to
	the horizontal axis, and top, middle, bottom always referring
	to the vertical axis.

	--IMPORTANT--

	You need to add `apply_layout_cache()` to the end of your main stylus file.

	Example:

	main.styl:
	```
	@import nib
	@import layout
	@import stuff
	@import modules

	apply_layout_cache()
	```


	Examples

	// align items horizontally, top left
	#thing
		layout horizontal top left

	// align items vertically on the right edge, vertically centered (middle)
	.things
		layout vertical right middle

	// align items horizontally on the bottom-left edge
	#foo
		layout horizontal bottom left

	#bar
		layout vertical nowrap bottom center


	Note:
	'reverse' is not supported because it would make the function overly-complex
	and probably not be what you're expecting. It's also rare to have a need for
	RTL layouts, so I excluded support that. If needed, drop-back down to
	individual property:keys.

*/

_layout()
	a = split(' ', arguments)

	if 'wrap-reverse' in a
		flex-wrap wrap-reverse

	unless 'nowrap' in a
		flex-wrap wrap

	if 'horizontal' in a
		flex-direction row

		// alignment horizontal axis
		if 'left' in a
			justify-content flex-start unless 'around' in a or 'between' in a
		if 'right' in a
			justify-content flex-end unless 'around' in a or 'between' in a
		if 'center' in a
			justify-content center unless 'around' in a or 'between' in a

		if 'around' in a
			justify-content space-around
		if 'between' in a
			justify-content space-between

		// this is a nice default to have, vertically center by default
		align-content center unless 'around' in a or 'between' in a

		//alignment vertical axis
		if 'top' in a
			align-content flex-start
			align-items flex-start
		else if 'bottom' in a
			align-content flex-end
			align-items flex-end
		else if 'middle' in a
			if 'tight' in a
				align-content center
			align-items center
		else if 'stretch' in a
			align-content stretch


	if 'vertical' in a
		flex-direction column

		//alignment horizontal axis
		if 'left' in a
			align-items flex-start
			unless 'loose' in a
				align-content flex-start unless 'around' in a or 'between' in a

		if 'right' in a
			align-items flex-end
			unless 'loose' in a
				align-content flex-end unless 'around' in a or 'between' in a

		if 'center' in a
			align-items center
			unless 'loose' in a
				align-content center unless 'around' in a or 'between' in a

		//alignment vertical axis
		if 'top' in a
			justify-content flex-start
		if 'bottom' in a
			justify-content flex-end
		if 'middle' in a
			justify-content center

		if 'around' in a
			align-content space-around
			justify-content space-around
		if 'between' in a
			align-content space-between
			justify-content space-between
		if 'stretch' in a
			justify-content stretch



$layout_cache = {}

layout()
	a = join(' ',arguments)
	unless $layout_cache[a]
		$layout_cache[a] = ()
	push($layout_cache[a], selector())

apply_layout_cache()
	common = ''
	for $layout, $selectors in $layout_cache
		sels = join(',', $selectors)
		common += sels + ', '
		{sels}
			_layout $layout
	{common}
		display flex

/**
 * Attributes for common layouts to save kb
 * TODO use partial selectors to save even more space?
**/

[layout-horizontal]
	layout horizontal

[layout-vertical]
	layout vertical

[layout-horizontal-middle] // center align on x, middle align y
	layout horizontal middle

[layout-horizontal-right] // right align x
	layout horizontal right

[layout-horizontal-right-middle] // right align x, middle align-y
	layout horizontal right middle

[layout-vertical-middle]
	layout vertical middle

[layout-vertical-middle-center]
	layout vertical middle center
